# Generated by Django 4.0.3 on 2022-03-05 10:44

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import sitemgr.models.user
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('filemgr', '0001_initial'),
        ('sites', '0002_alter_domain_unique'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and ./_ only.', max_length=150, unique=True, validators=[django.core.validators.MinLengthValidator(4), sitemgr.models.user.CustomUnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(max_length=30, validators=[django.core.validators.MinLengthValidator(2, message='Enter your first name.')], verbose_name='first name')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('signup_ip', models.GenericIPAddressField(blank=True, null=True, unpack_ipv4=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, unpack_ipv4=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'permissions': (('view_staff', 'Can view the staff site'),),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('description', models.TextField(blank=True)),
                ('short_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('was_deleted_by_user', models.BooleanField(default=False)),
                ('is_explicit', models.BooleanField(default=False)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Post',
                'verbose_name_plural': 'User Posts',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='View',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField(null=True, unpack_ipv4=True, verbose_name='ip address')),
                ('user_agent', models.TextField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='sitemgr.userpost')),
                ('viewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'View',
                'verbose_name_plural': 'Views',
                'ordering': ('-created',),
            },
        ),
        migrations.AddField(
            model_name='userpost',
            name='viewers',
            field=models.ManyToManyField(blank=True, related_name='viewed', through='sitemgr.View', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('icon_url', models.CharField(blank=True, help_text='Site icon url', max_length=400)),
                ('logo_url', models.CharField(blank=True, help_text='Site logo url', max_length=400)),
                ('privacy_policy', models.TextField(blank=True)),
                ('tos', models.TextField(blank=True, help_text='Terms of Service')),
                ('faq', models.TextField(blank=True, help_text='Frequently Asked Questions')),
                ('meta_keywords', models.CharField(blank=True, help_text='Site meta keywords separated by a comma', max_length=400)),
                ('description', models.TextField(blank=True, help_text='Site meta description separated by a comma')),
                ('show_sidebar', models.BooleanField(default=False, help_text='Show navigation bar on the left', verbose_name='show sidebar')),
                ('is_live', models.BooleanField(default=False, help_text='open site')),
                ('close_site_message', models.TextField(blank=True, default='This site is currently under construction. Please come back later!', help_text='This message appears when the site is not live')),
                ('require_login', models.BooleanField(default=True, help_text='require login to access explicit content')),
                ('site', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='sites.site')),
            ],
            options={
                'verbose_name': 'Site Setting',
                'verbose_name_plural': 'Site Setting',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('type', models.CharField(blank=True, choices=[('blogger', 'Blogger'), ('artist', 'Artist'), ('model', 'Model'), ('photographer', 'Photographer'), ('writer', 'Writer'), ('curator', 'Curato'), ('content_creator', 'Content Creator'), ('videographer', 'Videographer'), ('mua', 'Makeup Artist'), ('hair', 'Hair Stylist'), ('stylist', 'Wardrobe Stylist'), ('retoucher', 'Retoucher'), ('director', 'Director'), ('designer', 'Designer'), ('brand', 'Brand')], max_length=50, null=True, verbose_name='Category')),
                ('biography', models.TextField(blank=True, verbose_name='biography')),
                ('website', models.URLField(blank=True)),
                ('instagram_handle', models.CharField(blank=True, max_length=250)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_email_sent', models.BooleanField(default=False)),
                ('filter_explicit_content', models.BooleanField(default=True)),
                ('ip', models.GenericIPAddressField(blank=True, null=True, unpack_ipv4=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profile', to='filemgr.image')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'ordering': ('-created',),
                'permissions': (('view_staff', 'Can view the staff site'), ('_', 'Can view the staff site')),
            },
        ),
        migrations.CreateModel(
            name='PostSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allow_user_to_post', models.BooleanField(default=False)),
                ('site', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='sites.site')),
            ],
        ),
        migrations.CreateModel(
            name='IndexSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='%(class)s', help_text='Navbar label', max_length=400)),
                ('show_in_navbar', models.BooleanField(default=True, help_text='Show link in navbar')),
                ('show_in_footer', models.BooleanField(default=True, help_text='Show link in footer')),
                ('title', models.CharField(default='Official Website', help_text='Page title', max_length=400)),
                ('template', models.CharField(choices=[('bg_slider', 'Background Slider'), ('masonry', 'Masonry'), ('ecommerce1', 'Ecommerce 1')], default='masonry', max_length=50)),
                ('video_url', models.URLField(blank=True, null=True)),
                ('site', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='sites.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndexSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('name', models.CharField(max_length=200)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('text', models.TextField(blank=True)),
                ('columns_count', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(4)])),
                ('image_url', models.CharField(blank=True, max_length=500, null=True)),
                ('image_alt_text', models.CharField(blank=True, max_length=500, null=True)),
                ('cta', models.CharField(blank=True, max_length=500, null=True)),
                ('cta_url', models.URLField(blank=True, null=True)),
                ('page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='_sections', to='sitemgr.indexsetting')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='sitemgr.indexsection')),
            ],
            options={
                'verbose_name': 'Index Section',
                'verbose_name_plural': 'Index Sections',
                'ordering': ('created',),
            },
        ),
        migrations.CreateModel(
            name='IndexImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True)),
                ('cta', models.CharField(blank=True, max_length=100, null=True, verbose_name='Call to action')),
                ('cta_url', models.URLField(blank=True, null=True, verbose_name='Call to action url')),
                ('setting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='covers', to='sitemgr.indexsetting')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='creation date and time')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='update date and time')),
                ('object_id', models.PositiveIntegerField()),
                ('body', models.TextField()),
                ('active', models.BooleanField(default=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='sitemgr.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='AboutSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='%(class)s', help_text='Navbar label', max_length=400)),
                ('show_in_navbar', models.BooleanField(default=True, help_text='Show link in navbar')),
                ('show_in_footer', models.BooleanField(default=True, help_text='Show link in footer')),
                ('about', models.TextField(blank=True, default='')),
                ('contact_email', models.EmailField(blank=True, help_text='preferred contact email', max_length=400)),
                ('show_contact_form', models.BooleanField(default=False)),
                ('patreon_url', models.CharField(blank=True, help_text="Your site's patreon url", max_length=400)),
                ('instagram_url', models.CharField(blank=True, help_text='instagram url', max_length=400)),
                ('facebook_url', models.CharField(blank=True, help_text='facebook url', max_length=400)),
                ('pinterest_url', models.CharField(blank=True, help_text='pinterest url', max_length=400)),
                ('youtube_url', models.CharField(blank=True, help_text='youtube url', max_length=400)),
                ('site', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='sites.site')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
